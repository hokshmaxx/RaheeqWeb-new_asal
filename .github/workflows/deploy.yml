#name: Deploy Laravel App to EC2 with phpMyAdmin
#
#on:
#  push:
#    branches: [master]
#
#jobs:
#  deploy:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout Code
#        uses: actions/checkout@v3
#
#      - name: Setup SSH
#        run: |
#          mkdir -p ~/.ssh
#          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
#          sed -i 's/\\n/\n/g' ~/.ssh/id_rsa
#          chmod 600 ~/.ssh/id_rsa
#          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
#
#      - name: Deploy to EC2
#        run: |
#          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
#          set -ex
#
#          # Configuration variables
#          DOMAIN="raheeq.app"
#          EMAIL="hokshmax1@gmail.com"
#          APP_DIR="/var/www/html/raheeq"
#          PHPMYADMIN_DIR="/usr/share/phpmyadmin"
#          PHPMYADMIN_ALIAS="/phpmyadmin"
#          DB_NAME="laravel"
#          DB_USER="laraveluser"
#          DB_PASS="securepassword"
#          PHPMYADMIN_USER="admin"
#          PHPMYADMIN_PASS="SecurePhpMyAdminPass123!"
#
#          echo "üöÄ Starting deployment..."
#
#          # 1. Update system and install PHP 7.4 for better compatibility
#          echo "üì¶ Installing system packages with PHP 7.4..."
#          sudo apt-get update
#
#          # Add PHP repository for PHP 7.4
#          sudo apt-get install -y software-properties-common
#          sudo add-apt-repository ppa:ondrej/php -y
#          sudo apt-get update
#
#          # Install PHP 7.4 and required extensions
#          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
#            nginx \
#            php7.4-fpm \
#            php7.4-mysql \
#            php7.4-cli \
#            php7.4-mbstring \
#            php7.4-xml \
#            php7.4-curl \
#            php7.4-gd \
#            php7.4-zip \
#            php7.4-bcmath \
#            php7.4-json \
#            php7.4-tokenizer \
#            php7.4-intl \
#            php7.4-soap \
#            php7.4-redis \
#            php7.4-common \
#            php7.4-opcache \
#            unzip \
#            git \
#            wget \
#            mariadb-server \
#            certbot \
#            python3-certbot-nginx
#
#          # Set PHP 7.4 as default
#          sudo update-alternatives --set php /usr/bin/php7.4
#
#          # Disable other PHP versions if they exist
#          sudo systemctl stop php8.*-fpm 2>/dev/null || true
#          sudo systemctl disable php8.*-fpm 2>/dev/null || true
#
#          # Get PHP version for later use (should be 7.4 now)
#          PHP_VERSION="7.4"
#          echo "üìã Using PHP version: $PHP_VERSION"
#
#          # 2. Install phpMyAdmin
#          echo "üóÑÔ∏è Installing phpMyAdmin..."
#          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y phpmyadmin
#
#          # 3. Install Composer
#          echo "üéº Installing Composer..."
#          if ! command -v composer &> /dev/null; then
#            EXPECTED_CHECKSUM="$(wget -q -O - https://composer.github.io/installer.sig)"
#            php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
#            ACTUAL_CHECKSUM="$(php -r "echo hash_file('sha384', 'composer-setup.php');")"
#            if [ "$EXPECTED_CHECKSUM" != "$ACTUAL_CHECKSUM" ]; then
#                >&2 echo 'ERROR: Invalid installer checksum'
#                rm composer-setup.php
#                exit 1
#            fi
#            sudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer
#            rm composer-setup.php
#          fi
#
#          # 4. Setup MariaDB
#          echo "üóÉÔ∏è Setting up MariaDB..."
#          sudo systemctl start mariadb
#          sudo systemctl enable mariadb
#
#          # Create database and user
#          sudo mysql -u root <<EOSQL || true
#          CREATE DATABASE IF NOT EXISTS $DB_NAME CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
#          CREATE USER IF NOT EXISTS '$DB_USER'@'localhost' IDENTIFIED BY '$DB_PASS';
#          GRANT ALL PRIVILEGES ON $DB_NAME.* TO '$DB_USER'@'localhost';
#          FLUSH PRIVILEGES;
#          EOSQL
#
#          # 5. Clone or update Laravel application
#          echo "üì• Setting up Laravel application..."
#          if [ ! -d "$APP_DIR" ]; then
#            sudo git clone https://github.com/hokshmaxx/RaheeqWeb-new_asal.git $APP_DIR
#            sudo chown -R $USER:$USER $APP_DIR
#            cd $APP_DIR
#            if [ -f .env.example ]; then
#              cp .env.example .env
#            fi
#          else
#            cd $APP_DIR
#            sudo chown -R $USER:$USER $APP_DIR
#            git fetch origin
#            git reset --hard origin/master
#          fi
#
#          # 6. Configure Laravel environment
#          echo "‚öôÔ∏è Configuring Laravel environment..."
#          cd $APP_DIR
#
#          # Update .env file
#          if [ -f .env ]; then
#            sed -i "s/^DB_HOST=.*/DB_HOST=127.0.0.1/" .env
#            sed -i "s/^DB_DATABASE=.*/DB_DATABASE=$DB_NAME/" .env
#            sed -i "s/^DB_USERNAME=.*/DB_USERNAME=$DB_USER/" .env
#            sed -i "s/^DB_PASSWORD=.*/DB_PASSWORD=$DB_PASS/" .env
#            sed -i "s/^APP_URL=.*/APP_URL=https:\/\/$DOMAIN/" .env
#          fi
#
#          # 7. Install Laravel dependencies (should work perfectly with PHP 7.4)
#          echo "üì¶ Installing Laravel dependencies..."
#
#          # Standard installation should work fine with PHP 7.4
#          composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev
#
#          # Generate application key if not exists
#          if ! grep -q "APP_KEY=" .env || [ -z "$(grep "APP_KEY=" .env | cut -d'=' -f2)" ]; then
#            php artisan key:generate --force
#          fi
#
#          # Run Laravel setup commands
#          php artisan config:clear
#          php artisan cache:clear
#          php artisan route:clear
#          php artisan view:clear
#
#          # Run migrations
#          php artisan migrate --force || echo "‚ö†Ô∏è Migration failed, continuing..."
#
#          # MODIFIED: Skip route caching if there are duplicate route names
#          echo "üîç Checking for route conflicts..."
#          if php artisan route:cache 2>&1 | grep -q "Another route has already been assigned name"; then
#            echo "‚ö†Ô∏è Duplicate route names detected. Skipping route caching for now."
#            echo "üìù Please fix duplicate route names in your Laravel application:"
#            php artisan route:list --name=admin.admins.edit_password 2>/dev/null || echo "   Check routes/web.php and routes/admin.php for duplicate route names"
#          else
#            php artisan route:cache
#            echo "‚úÖ Routes cached successfully"
#          fi
#
#          # Cache config and views (these should work fine)
#          php artisan config:cache
#          php artisan view:cache
#
#          # 8. Setup phpMyAdmin configuration
#          echo "üîß Configuring phpMyAdmin..."
#
#          # Create phpMyAdmin config
#          sudo tee $PHPMYADMIN_DIR/config.inc.php > /dev/null <<PHPCONFIG
#          <?php
#          \$cfg['blowfish_secret'] = '$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-32)';
#          \$i = 0;
#
#          \$i++;
#          \$cfg['Servers'][\$i]['auth_type'] = 'cookie';
#          \$cfg['Servers'][\$i]['host'] = 'localhost';
#          \$cfg['Servers'][\$i]['compress'] = false;
#          \$cfg['Servers'][\$i]['AllowNoPassword'] = false;
#
#          \$cfg['DefaultLang'] = 'en';
#          \$cfg['ServerDefault'] = 1;
#          \$cfg['UploadDir'] = '';
#          \$cfg['SaveDir'] = '';
#          ?>
#          PHPCONFIG
#
#          # Create symlink for phpMyAdmin
#          sudo mkdir -p $APP_DIR/public
#          sudo rm -f $APP_DIR/public$PHPMYADMIN_ALIAS
#          sudo ln -sf $PHPMYADMIN_DIR $APP_DIR/public$PHPMYADMIN_ALIAS
#
#          # 9. Set proper permissions
#          echo "üîê Setting permissions..."
#          sudo chown -R www-data:www-data $APP_DIR
#          sudo chown -R www-data:www-data $PHPMYADMIN_DIR
#          sudo chmod -R 755 $APP_DIR/storage
#          sudo chmod -R 755 $APP_DIR/bootstrap/cache
#          sudo chmod -R 755 $PHPMYADMIN_DIR
#
#          # 10. Configure Nginx
#          echo "üåê Configuring Nginx..."
#          sudo tee /etc/nginx/sites-available/laravel.conf > /dev/null <<NGINXCONFIG
#          server {
#              listen 80;
#              server_name $DOMAIN www.$DOMAIN;
#
#              root $APP_DIR/public;
#              index index.php index.html index.htm;
#
#              # Security headers
#              add_header X-Frame-Options "SAMEORIGIN" always;
#              add_header X-XSS-Protection "1; mode=block" always;
#              add_header X-Content-Type-Options "nosniff" always;
#              add_header Referrer-Policy "no-referrer-when-downgrade" always;
#              add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
#
#              # Laravel application
#              location / {
#                  try_files \$uri \$uri/ /index.php?\$query_string;
#              }
#
#              # phpMyAdmin
#              location $PHPMYADMIN_ALIAS {
#                  alias $PHPMYADMIN_DIR;
#                  index index.php;
#
#                  location ~ ^$PHPMYADMIN_ALIAS/(.+\.php)\$ {
#                      alias $PHPMYADMIN_DIR/\$1;
#                      include snippets/fastcgi-php.conf;
#                      fastcgi_pass unix:/run/php/php$PHP_VERSION-fpm.sock;
#                      fastcgi_param SCRIPT_FILENAME \$request_filename;
#                      fastcgi_param PATH_INFO \$fastcgi_path_info;
#                      fastcgi_param PATH_TRANSLATED \$document_root\$fastcgi_path_info;
#                  }
#
#                  location ~* ^$PHPMYADMIN_ALIAS/(.+\.(jpg|jpeg|gif|css|png|js|ico|html|xml|txt))\$ {
#                      alias $PHPMYADMIN_DIR/\$1;
#                      expires 1y;
#                      add_header Cache-Control "public, immutable";
#                  }
#              }
#
#              # PHP files for Laravel
#              location ~ \.php\$ {
#                  include snippets/fastcgi-php.conf;
#                  fastcgi_pass unix:/run/php/php$PHP_VERSION-fpm.sock;
#                  fastcgi_param SCRIPT_FILENAME \$realpath_root\$fastcgi_script_name;
#                  fastcgi_param DOCUMENT_ROOT \$realpath_root;
#              }
#
#              # Deny access to hidden files
#              location ~ /\. {
#                  deny all;
#              }
#
#              # Deny access to Laravel sensitive files
#              location ~ /(\.env|\.git|storage|tests|database|resources/views) {
#                  deny all;
#              }
#
#              # Optimize static files
#              location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg)\$ {
#                  expires 1y;
#                  add_header Cache-Control "public, immutable";
#              }
#          }
#          NGINXCONFIG
#
#          # Enable the site and disable default
#          sudo ln -sf /etc/nginx/sites-available/laravel.conf /etc/nginx/sites-enabled/
#          sudo rm -f /etc/nginx/sites-enabled/default
#
#          # 11. Configure PHP-FPM
#          echo "üêò Configuring PHP-FPM..."
#          sudo sed -i 's/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/' /etc/php/$PHP_VERSION/fpm/php.ini
#          sudo sed -i 's/upload_max_filesize = .*/upload_max_filesize = 100M/' /etc/php/$PHP_VERSION/fpm/php.ini
#          sudo sed -i 's/post_max_size = .*/post_max_size = 100M/' /etc/php/$PHP_VERSION/fpm/php.ini
#          sudo sed -i 's/max_execution_time = .*/max_execution_time = 300/' /etc/php/$PHP_VERSION/fpm/php.ini
#          sudo sed -i 's/memory_limit = .*/memory_limit = 512M/' /etc/php/$PHP_VERSION/fpm/php.ini
#
#          # 12. Test and start services
#          echo "üîÑ Starting services..."
#          sudo systemctl enable nginx
#          sudo systemctl enable php7.4-fpm
#          sudo systemctl enable mariadb
#
#          sudo systemctl restart php7.4-fpm
#          sudo systemctl restart mariadb
#
#          # Test Nginx configuration
#          if sudo nginx -t; then
#              sudo systemctl restart nginx
#              echo "‚úÖ Nginx configuration is valid"
#          else
#              echo "‚ùå Nginx configuration error"
#              exit 1
#          fi
#
#          # 13. Setup SSL with Certbot
#          echo "üîí Setting up SSL certificate..."
#          sudo certbot --nginx --non-interactive --agree-tos --redirect -m $EMAIL -d $DOMAIN -d www.$DOMAIN || {
#              echo "‚ö†Ô∏è SSL setup failed, continuing without SSL"
#          }
#
#          # 14. Create phpMyAdmin htaccess protection (optional)
#          echo "üîê Setting up phpMyAdmin password protection..."
#          sudo tee $APP_DIR/public$PHPMYADMIN_ALIAS/.htaccess > /dev/null <<HTACCESS
#          AuthType Basic
#          AuthName "phpMyAdmin Access"
#          AuthUserFile /etc/phpmyadmin/.htpasswd
#          Require valid-user
#          HTACCESS
#
#          # Create htpasswd file
#          sudo mkdir -p /etc/phpmyadmin
#          echo "$PHPMYADMIN_USER:$(openssl passwd -apr1 $PHPMYADMIN_PASS)" | sudo tee /etc/phpmyadmin/.htpasswd
#
#          # 15. Final permissions check
#          echo "üîß Final permission adjustments..."
#          sudo chown -R www-data:www-data $APP_DIR
#          sudo chown -R www-data:www-data $PHPMYADMIN_DIR
#          sudo chmod -R 755 $APP_DIR/storage
#          sudo chmod -R 755 $APP_DIR/bootstrap/cache
#          sudo find $APP_DIR -type f -name "*.php" -exec chmod 644 {} \;
#
#          # 16. Clean up
#          echo "üßπ Cleaning up..."
#          sudo apt-get autoremove -y
#          sudo apt-get autoclean
#
#          # 17. Display final information
#          echo ""
#          echo "‚úÖ =================================="
#          echo "‚úÖ DEPLOYMENT COMPLETED SUCCESSFULLY!"
#          echo "‚úÖ =================================="
#          echo ""
#          echo "üåê Application URL: https://$DOMAIN"
#          echo "üóÑÔ∏è phpMyAdmin URL: https://$DOMAIN$PHPMYADMIN_ALIAS"
#          echo ""
#          echo "üìã Database Information:"
#          echo "   Database: $DB_NAME"
#          echo "   Username: $DB_USER"
#          echo "   Password: $DB_PASS"
#          echo ""
#          echo "üîê phpMyAdmin Credentials:"
#          echo "   Username: $PHPMYADMIN_USER"
#          echo "   Password: $PHPMYADMIN_PASS"
#          echo ""
#          echo "üîß Services Status:"
#          sudo systemctl is-active nginx && echo "   ‚úÖ Nginx: Running" || echo "   ‚ùå Nginx: Not Running"
#          sudo systemctl is-active php7.4-fpm && echo "   ‚úÖ PHP 7.4-FPM: Running" || echo "   ‚ùå PHP 7.4-FPM: Not Running"
#          sudo systemctl is-active mariadb && echo "   ‚úÖ MariaDB: Running" || echo "   ‚ùå MariaDB: Not Running"
#          echo ""
#          echo "üìù To troubleshoot issues, check logs:"
#          echo "   Nginx: sudo tail -f /var/log/nginx/error.log"
#          echo "   PHP-FPM: sudo tail -f /var/log/php7.4-fpm.log"
#          echo "   MariaDB: sudo tail -f /var/log/mysql/error.log"
#          echo ""
#
#          # Test URLs
#          echo "üß™ Testing application..."
#          if curl -s -o /dev/null -w "%{http_code}" http://localhost | grep -q "200\|301\|302"; then
#              echo "   ‚úÖ Laravel application is responding"
#          else
#              echo "   ‚ö†Ô∏è Laravel application may have issues"
#          fi
#
#          if curl -s -o /dev/null -w "%{http_code}" http://localhost$PHPMYADMIN_ALIAS/ | grep -q "200\|401"; then
#              echo "   ‚úÖ phpMyAdmin is accessible"
#          else
#              echo "   ‚ö†Ô∏è phpMyAdmin may have issues"
#          fi
#
#          echo ""
#          echo "‚ö†Ô∏è IMPORTANT: If route caching was skipped, please fix duplicate route names in your Laravel application."
#          echo "   You can check for duplicates by running: php artisan route:list | grep 'admin.admins.edit_password'"
#          echo ""
#          echo "üéâ Deployment completed! Your Laravel application with phpMyAdmin is ready!"
#          EOF

name: Deploy Laravel App to EC2 with phpMyAdmin

on:
  push:
    branches: [master]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          sed -i 's/\\n/\n/g' ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          set -ex

          # Configuration variables
          DOMAIN="raheeq.app"
          EMAIL="hokshmax1@gmail.com"
          APP_DIR="/var/www/html/raheeq"
          PHPMYADMIN_DIR="/usr/share/phpmyadmin"
          PHPMYADMIN_ALIAS="/phpmyadmin"
          DB_NAME="laravel"
          DB_USER="laraveluser"
          DB_PASS="securepassword"
          PHPMYADMIN_USER="admin"
          PHPMYADMIN_PASS="SecurePhpMyAdminPass123!"

          echo "üöÄ Starting deployment..."

          # 1. Update system and install PHP 7.4 for better compatibility
          echo "üì¶ Installing system packages with PHP 7.4..."
          sudo apt-get update

          # Add PHP repository for PHP 7.4
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository ppa:ondrej/php -y
          sudo apt-get update

          # Install PHP 7.4 and required extensions
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
            nginx \
            php7.4-fpm \
            php7.4-mysql \
            php7.4-cli \
            php7.4-mbstring \
            php7.4-xml \
            php7.4-curl \
            php7.4-gd \
            php7.4-zip \
            php7.4-bcmath \
            php7.4-json \
            php7.4-tokenizer \
            php7.4-intl \
            php7.4-soap \
            php7.4-redis \
            php7.4-common \
            php7.4-opcache \
            unzip \
            git \
            wget \
            mariadb-server \
            certbot \
            python3-certbot-nginx

          # Set PHP 7.4 as default
          sudo update-alternatives --set php /usr/bin/php7.4

          # Disable other PHP versions if they exist
          sudo systemctl stop php8.*-fpm 2>/dev/null || true
          sudo systemctl disable php8.*-fpm 2>/dev/null || true

          # Get PHP version for later use (should be 7.4 now)
          PHP_VERSION="7.4"
          echo "üìã Using PHP version: $PHP_VERSION"

          # 2. Install phpMyAdmin
          echo "üóÑÔ∏è Installing phpMyAdmin..."
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y phpmyadmin

          # 3. Install Composer
          echo "üéº Installing Composer..."
          if ! command -v composer &> /dev/null; then
            EXPECTED_CHECKSUM="$(wget -q -O - https://composer.github.io/installer.sig)"
            php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
            ACTUAL_CHECKSUM="$(php -r "echo hash_file('sha384', 'composer-setup.php');")"
            if [ "$EXPECTED_CHECKSUM" != "$ACTUAL_CHECKSUM" ]; then
                >&2 echo 'ERROR: Invalid installer checksum'
                rm composer-setup.php
                exit 1
            fi
            sudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer
            rm composer-setup.php
          fi

          # 4. Setup MariaDB
          echo "üóÉÔ∏è Setting up MariaDB..."
          sudo systemctl start mariadb
          sudo systemctl enable mariadb

          # Create database and user
          sudo mysql -u root <<EOSQL || true
          CREATE DATABASE IF NOT EXISTS $DB_NAME CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
          CREATE USER IF NOT EXISTS '$DB_USER'@'localhost' IDENTIFIED BY '$DB_PASS';
          GRANT ALL PRIVILEGES ON $DB_NAME.* TO '$DB_USER'@'localhost';
          FLUSH PRIVILEGES;
          EOSQL

          # 5. Clone or update Laravel application
          echo "üì• Setting up Laravel application..."
          if [ ! -d "$APP_DIR" ]; then
            sudo git clone https://github.com/hokshmaxx/RaheeqWeb-new_asal.git $APP_DIR
            sudo chown -R $USER:$USER $APP_DIR
            cd $APP_DIR
            if [ -f .env.example ]; then
              cp .env.example .env
            fi
          else
            cd $APP_DIR

            # IMPORTANT: Fix permissions and update repository
            echo "üì• Pulling latest changes from repository..."

            # Change ownership to current user for git operations
            sudo chown -R $USER:$USER $APP_DIR

            # Show current commit before update
            echo "Current commit:"
            git log -1 --oneline

            # Remove any local changes and untracked files
            git reset --hard HEAD
            git clean -fdx

            # Configure git to avoid issues
            git config --global --add safe.directory $APP_DIR

            # Fetch all branches and tags
            git fetch --all --tags --prune

            # Force checkout to master branch
            git checkout master || git checkout -b master origin/master

            # Reset to latest master
            git reset --hard origin/master

            # Pull with rebase to ensure we get latest
            git pull --rebase origin master

            # Show new commit after update
            echo "New commit:"
            git log -1 --oneline

            # Verify we have the specific commit
            if git log --oneline | grep -q "f1fc730c278a8ec95feb5eacdacd129852c677aa"; then
              echo "‚úÖ Successfully updated to latest commit including f1fc730"
            else
              echo "‚ö†Ô∏è Warning: Expected commit f1fc730 not found, fetching again..."
              git fetch origin master
              git reset --hard origin/master
            fi

            echo "‚úÖ Repository updated to latest commit"
          fi

          # 6. Configure Laravel environment
          echo "‚öôÔ∏è Configuring Laravel environment..."
          cd $APP_DIR

          # Update .env file
          if [ -f .env ]; then
            sed -i "s/^DB_HOST=.*/DB_HOST=127.0.0.1/" .env
            sed -i "s/^DB_DATABASE=.*/DB_DATABASE=$DB_NAME/" .env
            sed -i "s/^DB_USERNAME=.*/DB_USERNAME=$DB_USER/" .env
            sed -i "s/^DB_PASSWORD=.*/DB_PASSWORD=$DB_PASS/" .env
            sed -i "s/^APP_URL=.*/APP_URL=https:\/\/$DOMAIN/" .env
          fi

          # 7. Install Laravel dependencies (should work perfectly with PHP 7.4)
          echo "üì¶ Installing Laravel dependencies..."

          # Clear composer cache and remove vendor directory
          composer clear-cache
          rm -rf vendor
          rm -f composer.lock

          # Standard installation should work fine with PHP 7.4
          composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev

          # Generate application key if not exists
          if ! grep -q "APP_KEY=" .env || [ -z "$(grep "APP_KEY=" .env | cut -d'=' -f2)" ]; then
            php artisan key:generate --force
          fi

          # Clear all Laravel caches and compiled files
          echo "üßπ Clearing all Laravel caches..."
          rm -rf bootstrap/cache/*
          php artisan config:clear
          php artisan cache:clear
          php artisan route:clear
          php artisan view:clear
          php artisan optimize:clear

          # Remove compiled class file
          rm -f bootstrap/compiled.php

          # Clear any opcache
          php -r "opcache_reset();" || true

          # Run migrations
          php artisan migrate --force || echo "‚ö†Ô∏è Migration failed, continuing..."

          # MODIFIED: Skip route caching if there are duplicate route names
          echo "üîç Checking for route conflicts..."
          if php artisan route:cache 2>&1 | grep -q "Another route has already been assigned name"; then
            echo "‚ö†Ô∏è Duplicate route names detected. Skipping route caching for now."
            echo "üìù Please fix duplicate route names in your Laravel application:"
            php artisan route:list --name=admin.admins.edit_password 2>/dev/null || echo "   Check routes/web.php and routes/admin.php for duplicate route names"
          else
            php artisan route:cache
            echo "‚úÖ Routes cached successfully"
          fi

          # Cache config and views (these should work fine)
          php artisan config:cache
          php artisan view:cache

          # 8. Setup phpMyAdmin configuration
          echo "üîß Configuring phpMyAdmin..."

          # Create phpMyAdmin config
          sudo tee $PHPMYADMIN_DIR/config.inc.php > /dev/null <<PHPCONFIG
          <?php
          \$cfg['blowfish_secret'] = '$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-32)';
          \$i = 0;

          \$i++;
          \$cfg['Servers'][\$i]['auth_type'] = 'cookie';
          \$cfg['Servers'][\$i]['host'] = 'localhost';
          \$cfg['Servers'][\$i]['compress'] = false;
          \$cfg['Servers'][\$i]['AllowNoPassword'] = false;

          \$cfg['DefaultLang'] = 'en';
          \$cfg['ServerDefault'] = 1;
          \$cfg['UploadDir'] = '';
          \$cfg['SaveDir'] = '';
          ?>
          PHPCONFIG

          # Create symlink for phpMyAdmin
          sudo mkdir -p $APP_DIR/public
          sudo rm -f $APP_DIR/public$PHPMYADMIN_ALIAS
          sudo ln -sf $PHPMYADMIN_DIR $APP_DIR/public$PHPMYADMIN_ALIAS

          # 9. Set proper permissions
          echo "üîê Setting permissions..."
          sudo chown -R www-data:www-data $APP_DIR
          sudo chown -R www-data:www-data $PHPMYADMIN_DIR
          sudo chmod -R 755 $APP_DIR/storage
          sudo chmod -R 755 $APP_DIR/bootstrap/cache
          sudo chmod -R 755 $PHPMYADMIN_DIR

          # 10. Configure Nginx
          echo "üåê Configuring Nginx..."
          sudo tee /etc/nginx/sites-available/laravel.conf > /dev/null <<NGINXCONFIG
          server {
              listen 80;
              server_name $DOMAIN www.$DOMAIN;

              root $APP_DIR/public;
              index index.php index.html index.htm;

              # Security headers
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-XSS-Protection "1; mode=block" always;
              add_header X-Content-Type-Options "nosniff" always;
              add_header Referrer-Policy "no-referrer-when-downgrade" always;
              add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

              # Laravel application
              location / {
                  try_files \$uri \$uri/ /index.php?\$query_string;
              }

              # phpMyAdmin
              location $PHPMYADMIN_ALIAS {
                  alias $PHPMYADMIN_DIR;
                  index index.php;

                  location ~ ^$PHPMYADMIN_ALIAS/(.+\.php)\$ {
                      alias $PHPMYADMIN_DIR/\$1;
                      include snippets/fastcgi-php.conf;
                      fastcgi_pass unix:/run/php/php$PHP_VERSION-fpm.sock;
                      fastcgi_param SCRIPT_FILENAME \$request_filename;
                      fastcgi_param PATH_INFO \$fastcgi_path_info;
                      fastcgi_param PATH_TRANSLATED \$document_root\$fastcgi_path_info;
                  }

                  location ~* ^$PHPMYADMIN_ALIAS/(.+\.(jpg|jpeg|gif|css|png|js|ico|html|xml|txt))\$ {
                      alias $PHPMYADMIN_DIR/\$1;
                      expires 1y;
                      add_header Cache-Control "public, immutable";
                  }
              }

              # PHP files for Laravel
              location ~ \.php\$ {
                  include snippets/fastcgi-php.conf;
                  fastcgi_pass unix:/run/php/php$PHP_VERSION-fpm.sock;
                  fastcgi_param SCRIPT_FILENAME \$realpath_root\$fastcgi_script_name;
                  fastcgi_param DOCUMENT_ROOT \$realpath_root;
              }

              # Deny access to hidden files
              location ~ /\. {
                  deny all;
              }

              # Deny access to Laravel sensitive files
              location ~ /(\.env|\.git|storage|tests|database|resources/views) {
                  deny all;
              }

              # Optimize static files
              location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg)\$ {
                  expires 1y;
                  add_header Cache-Control "public, immutable";
              }
          }
          NGINXCONFIG

          # Enable the site and disable default
          sudo ln -sf /etc/nginx/sites-available/laravel.conf /etc/nginx/sites-enabled/
          sudo rm -f /etc/nginx/sites-enabled/default

          # 11. Configure PHP-FPM
          echo "üêò Configuring PHP-FPM..."
          sudo sed -i 's/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/' /etc/php/$PHP_VERSION/fpm/php.ini
          sudo sed -i 's/upload_max_filesize = .*/upload_max_filesize = 100M/' /etc/php/$PHP_VERSION/fpm/php.ini
          sudo sed -i 's/post_max_size = .*/post_max_size = 100M/' /etc/php/$PHP_VERSION/fpm/php.ini
          sudo sed -i 's/max_execution_time = .*/max_execution_time = 300/' /etc/php/$PHP_VERSION/fpm/php.ini
          sudo sed -i 's/memory_limit = .*/memory_limit = 512M/' /etc/php/$PHP_VERSION/fpm/php.ini

          # 12. Test and start services
          echo "üîÑ Starting services..."
          sudo systemctl enable nginx
          sudo systemctl enable php7.4-fpm
          sudo systemctl enable mariadb

          sudo systemctl restart php7.4-fpm
          sudo systemctl restart mariadb

          # Test Nginx configuration
          if sudo nginx -t; then
              sudo systemctl restart nginx
              echo "‚úÖ Nginx configuration is valid"
          else
              echo "‚ùå Nginx configuration error"
              exit 1
          fi

          # 13. Setup SSL with Certbot
          echo "üîí Setting up SSL certificate..."
          sudo certbot --nginx --non-interactive --agree-tos --redirect -m $EMAIL -d $DOMAIN -d www.$DOMAIN || {
              echo "‚ö†Ô∏è SSL setup failed, continuing without SSL"
          }

          # 14. Create phpMyAdmin htaccess protection (optional)
          echo "üîê Setting up phpMyAdmin password protection..."
          sudo tee $APP_DIR/public$PHPMYADMIN_ALIAS/.htaccess > /dev/null <<HTACCESS
          AuthType Basic
          AuthName "phpMyAdmin Access"
          AuthUserFile /etc/phpmyadmin/.htpasswd
          Require valid-user
          HTACCESS

          # Create htpasswd file
          sudo mkdir -p /etc/phpmyadmin
          echo "$PHPMYADMIN_USER:$(openssl passwd -apr1 $PHPMYADMIN_PASS)" | sudo tee /etc/phpmyadmin/.htpasswd

          # 15. Final permissions check
          echo "üîß Final permission adjustments..."
          sudo chown -R www-data:www-data $APP_DIR
          sudo chown -R www-data:www-data $PHPMYADMIN_DIR
          sudo chmod -R 755 $APP_DIR/storage
          sudo chmod -R 755 $APP_DIR/bootstrap/cache
          sudo find $APP_DIR -type f -name "*.php" -exec chmod 644 {} \;

          # 16. Clean up
          echo "üßπ Cleaning up..."
          sudo apt-get autoremove -y
          sudo apt-get autoclean

          # 17. Display final information
          echo ""
          echo "‚úÖ =================================="
          echo "‚úÖ DEPLOYMENT COMPLETED SUCCESSFULLY!"
          echo "‚úÖ =================================="
          echo ""
          echo "üåê Application URL: https://$DOMAIN"
          echo "üóÑÔ∏è phpMyAdmin URL: https://$DOMAIN$PHPMYADMIN_ALIAS"
          echo ""
          echo "üìã Database Information:"
          echo "   Database: $DB_NAME"
          echo "   Username: $DB_USER"
          echo "   Password: $DB_PASS"
          echo ""
          echo "üîê phpMyAdmin Credentials:"
          echo "   Username: $PHPMYADMIN_USER"
          echo "   Password: $PHPMYADMIN_PASS"
          echo ""
          echo "üîß Services Status:"
          sudo systemctl is-active nginx && echo "   ‚úÖ Nginx: Running" || echo "   ‚ùå Nginx: Not Running"
          sudo systemctl is-active php7.4-fpm && echo "   ‚úÖ PHP 7.4-FPM: Running" || echo "   ‚ùå PHP 7.4-FPM: Not Running"
          sudo systemctl is-active mariadb && echo "   ‚úÖ MariaDB: Running" || echo "   ‚ùå MariaDB: Not Running"
          echo ""
          echo "üìù To troubleshoot issues, check logs:"
          echo "   Nginx: sudo tail -f /var/log/nginx/error.log"
          echo "   PHP-FPM: sudo tail -f /var/log/php7.4-fpm.log"
          echo "   MariaDB: sudo tail -f /var/log/mysql/error.log"
          echo ""

          # Test URLs
          echo "üß™ Testing application..."
          if curl -s -o /dev/null -w "%{http_code}" http://localhost | grep -q "200\|301\|302"; then
              echo "   ‚úÖ Laravel application is responding"
          else
              echo "   ‚ö†Ô∏è Laravel application may have issues"
          fi

          if curl -s -o /dev/null -w "%{http_code}" http://localhost$PHPMYADMIN_ALIAS/ | grep -q "200\|401"; then
              echo "   ‚úÖ phpMyAdmin is accessible"
          else
              echo "   ‚ö†Ô∏è phpMyAdmin may have issues"
          fi

          echo ""
          echo "üìã Deployment verification:"
          cd $APP_DIR
          echo "   Current git commit:"
          git log -1 --oneline
          echo "   Laravel version:"
          php artisan --version
          echo "   Environment:"
          php artisan env

          echo ""
          echo "‚ö†Ô∏è IMPORTANT: If route caching was skipped, please fix duplicate route names in your Laravel application."
          echo "   You can check for duplicates by running: php artisan route:list | grep 'admin.admins.edit_password'"
          echo ""
          echo "üéâ Deployment completed! Your Laravel application with phpMyAdmin is ready!"
          EOF
